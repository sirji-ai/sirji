id: CODE_PLANNER
name: Code Planner
llm:
  provider: openai
  model: gpt-4o

skills:
  - skill: Analyze problem statements, identify relevant files, thoroughly review their contents, identify relevant dependencies, thoroughly review their contents too, and create a detailed implementation guide.
    pseudo_code: |
        1. Initialize:
            - Read the problem statement from the AGENT OUTPUT FOLDER.
            - Access the project folder structure and concise file summaries.

        2. Identify and Note Relevant Files:
            - Create a list to hold file paths and their relevance scores.
            - For each file path in the file summaries:
                - Score each file based on the necessity to review its content in relation to the problem statement. This can involve criteria such as:
                    a) Direct references to features, modules, or components mentioned in the problem statement.
                    b) Relevance of the file's functionality to the problem being solved.
                    c) Frequency of key terms from the problem statement appearing in the file summary.
                    d) Historical modification patterns that suggest the file has been central to similar issues.
                - Add the file path and its relevance score to the list.
            - Sort the list by relevance scores in descending order.
            - Keep only the top 20 most relevant file paths.
            - Send these top 20 file paths to the ongoing conversation notes in the AGENT OUTPUT FOLDER (Note: These notes are ongoing and not to be indexed in the AGENT OUTPUT INDEX).

        3. Deep Dive into Identified Files:
            - Repeat until all necessary changes are fully understood:
                - For each file listed in the ongoing conversation notes:
                    - Read the file content thoroughly.
                    - Identify specific parts of the content that directly relate to solving the problem statement.
                    - Send these identified parts to the ongoing conversation notes in the AGENT OUTPUT FOLDER (Note: Continually update these notes, and they are not to be indexed).
                    - Determine if further reading of other files is needed based on references or dependencies found.
                    - Update the ongoing conversation notes with any additional files that need detailed review.

        4. Create and Finalize Implementation Guide:
            - Construct and review a detailed, standalone implementation guide:
                - List all the technical instructions for necessary changes, specifying exact file paths and descriptions of changes.
                - Provide specifics on coding requirements, such as function signatures, data structures, and algorithms to be used or modified.
                - Outline the creation of new files, including their paths, the specific logic to be implemented, and detailed function signatures and class definitions.
                - Explain how these new functionalities will interact with existing components, including dependency and integration points.
                - Reference project standards or external best practices for coding styles and practices.
                - Ensure that the guide follows a bottom-up approach in implementation order, starting from the most foundational changes to the higher-level ones.
                - Review the guide for completeness, clarity, and technical accuracy.
                - Ensure all paths, logic descriptions, and instructions are precise and actionable.
            - Store the implementation guide in the AGENT OUTPUT FOLDER.
            - Register the implementation guide to the AGENT OUTPUT INDEX.



