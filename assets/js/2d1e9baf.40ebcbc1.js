"use strict";(self.webpackChunksirji_docs=self.webpackChunksirji_docs||[]).push([[539],{2886:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var n=s(4848),o=s(8453);const i={sidebar_position:6},r="Messaging Protocol",c={id:"messaging-protocol",title:"Messaging Protocol",description:"Let's deep dive into the Sirji Messaging Protocol.",source:"@site/docs/messaging-protocol.md",sourceDirName:".",slug:"/messaging-protocol",permalink:"/messaging-protocol",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/architecture"}},l={},a=[{value:"Overview",id:"overview",level:2},{value:"Initial Invocation",id:"initial-invocation",level:2},{value:"Pseudocode Execution",id:"pseudocode-execution",level:2},{value:"Sequential Execution",id:"sequential-execution",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"messaging-protocol",children:"Messaging Protocol"}),"\n",(0,n.jsx)(t.p,{children:"Let's deep dive into the Sirji Messaging Protocol."}),"\n",(0,n.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(t.p,{children:"Custom agents in Sirji have their own custom pseudocode, which consists of a list of numbered steps. These steps provide a blueprint for how the conversation with the LLM will proceed. When a completions API call is made, the message history, along with the latest message, is passed to the LLM, which responds according to the Sirji Messaging Protocol, following the steps given in the pseudocode."}),"\n",(0,n.jsx)(t.h2,{id:"initial-invocation",children:"Initial Invocation"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"System Prompt and Invocation"}),": At the beginning of a fresh session, when an agent is invoked, the system prompt and the invocation message are sent as input for the first completions API call."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LLM Response"}),": The LLM responds with a message that aligns with the Sirji Messaging Protocol and the requirements of the agent pseudocode."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"pseudocode-execution",children:"Pseudocode Execution"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Pseudocode Structure"}),": The pseudocode is a list of numbered steps that provide a blueprint for the conversation. Each step is converted into a message according to the Sirji messaging protocol by the LLM. The Sirji framework understands these messages, resulting in a limited number of allowed message types, restricting each pseudocode step to only ",(0,n.jsx)(t.a,{href:"./custom-agents/writing-agent-pseudocode#pseudocode-scenarios",children:"permitted scenarios"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"First API Call Response"}),': In the response to the first completions API call, the LLM sends a message as per the first step of the pseudocode. For example, if the first step is "Read the problem statement from the Agent Output Folder," the LLM\'s response will instruct the Executor to read the file containing the problem statement.']}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"sequential-execution",children:"Sequential Execution"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Executor Action"}),": Upon receiving the LLM's response, the Executor reads the requested file."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Second API Call"}),": The Executor sends the file's content, along with the system message, the invocation message, and the message output from the first completions API call, in the second completions API call request."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LLM Response to Step 2"}),": In response to the second completions API call, the LLM responds with a message corresponding to step 2 of the pseudocode."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This process continues, with each step in the pseudocode being executed one by one."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(6540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);